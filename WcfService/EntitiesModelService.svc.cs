#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Code is generated by Telerik Data Access Service Wizard
// using PlainDataService.tt template
    
namespace WcfService
{
	using System.ServiceModel;
	using WcfService.Dto;
	using WcfService.Assemblers;
	using WcfService.Repositories;
	using WcfService.Services;
	using DataLayer;
	using System;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.Serialization;

	/// <summary>
	/// EntitiesModelService service class handler.
	/// </summary>
	[ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]
	public partial class EntitiesModelService : IEntitiesModelService
	{
	    /// <summary>
	    /// Maintains a list of objects affected by a business transaction and coordinates 
	    /// the writing out of changes and the resolution of concurrency problems.
	    /// </summary>
	    private IEntitiesModelUnitOfWork unitOfWork;
	    
	    /// <summary>
	    /// Get or sets the specific UnitOfWork. It maintains a list of objects affected 
	    /// by a business transaction and coordinates the writing out of changes and the resolution of concurrency problems.
	    /// </summary>
	    public IEntitiesModelUnitOfWork UnitOfWork
	    {
	        get
	        {
	            if(this.unitOfWork == null)
	            {
	                this.unitOfWork = new EntitiesModel();
	            }
	            return this.unitOfWork;
	        }
	        set
	        {
	            this.unitOfWork = value;
	        }
	    }	
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Affluenza entity.
	    /// </summary>
	    private IAffluenzaService affluenzaservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Affluenza entity.
	    /// </summary>
	    public virtual IAffluenzaService AffluenzaService
	    {
	        get
	        {
	            if (this.affluenzaservice == null)
	            {
	                IAffluenzaAssembler assembler = new AffluenzaAssembler();
	                IAffluenzaRepository repository = new AffluenzaRepository(this.UnitOfWork);
	
	                this.affluenzaservice = new AffluenzaService(assembler, repository);
	            }
	            return this.affluenzaservice;
	        }
	    }
	        
	    #region Affluenzas CRUD Operations
	
	    /// <summary>
	    /// Returns all affluenzas.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<AffluenzaDto> ReadAffluenzas()	
	    {
	        return this.AffluenzaService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of affluenzas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<AffluenzaDto> ReadAffluenzasPaged(int startIndex, int pageSize)
	    {
	        return this.AffluenzaService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all affluenzas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<AffluenzaDto> ReadAffluenzasFiltered(string sortExpression, string filterExpression)
	    {
	        return this.AffluenzaService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of affluenzas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<AffluenzaDto> ReadAffluenzasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.AffluenzaService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a affluenza with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public AffluenzaDto ReadAffluenza(string dtoKey)
	    {
	        return this.AffluenzaService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all affluenzas count.
	    /// </summary>
	    /// <returns></returns>
	    public int AffluenzasCount()
	    {
	        return this.AffluenzaService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all affluenzas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int AffluenzasCountFiltered(string filterExpression)
	    {
	        return this.AffluenzaService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new affluenza from the given dto object into the database.
	    /// </summary>
	    /// <param name="affluenza">The dto object.</param>
	    /// <returns>The dto key of the newly created affluenza.</returns>
	    public string CreateAffluenza(AffluenzaDto affluenza)
	    {
	        string key = this.AffluenzaService.Add(affluenza);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing affluenza in the database from the given dto object.
	    /// </summary>
	    /// <param name="affluenza">The dto object.</param>
	    public void UpdateAffluenza(AffluenzaDto affluenza)
	    {
	        this.AffluenzaService.Update(affluenza);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update affluenzas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="affluenzas">The dto object list.</param>
	    public void UpdateAffluenzas(IEnumerable<AffluenzaDto> affluenzas)
	    {
	        if (affluenzas == null)
	        {
	            return;
	        }
	
	        foreach (AffluenzaDto affluenza in affluenzas)
	        {
	            if (affluenza == null)
	            {
	                continue;
	            }
	            
	            this.UpdateAffluenza(affluenza);
	        }
	    }
	
	    /// <summary>
	    /// Deletes affluenza from the database by the given dto object.
	    /// </summary>
	    /// <param name="affluenza">The dto object.</param>
	    public void DeleteAffluenza(AffluenzaDto affluenza)
	    {
	        this.AffluenzaService.Delete(affluenza);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete affluenzas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="affluenzas">The dto object list.</param>
	    public void DeleteAffluenzas(IEnumerable<AffluenzaDto> affluenzas)
	    {
	        if (affluenzas == null)
	        {
	            return;
	        }
	
	        foreach (AffluenzaDto affluenza in affluenzas)
	        {
	            if (affluenza == null)
	            {
	                continue;
	            }
	            
	            this.DeleteAffluenza(affluenza);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Candidato entity.
	    /// </summary>
	    private ICandidatoService candidatoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Candidato entity.
	    /// </summary>
	    public virtual ICandidatoService CandidatoService
	    {
	        get
	        {
	            if (this.candidatoservice == null)
	            {
	                ICandidatoAssembler assembler = new CandidatoAssembler();
	                ICandidatoRepository repository = new CandidatoRepository(this.UnitOfWork);
	
	                this.candidatoservice = new CandidatoService(assembler, repository);
	            }
	            return this.candidatoservice;
	        }
	    }
	        
	    #region Candidatos CRUD Operations
	
	    /// <summary>
	    /// Returns all candidatos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CandidatoDto> ReadCandidatos()	
	    {
	        return this.CandidatoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of candidatos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CandidatoDto> ReadCandidatosPaged(int startIndex, int pageSize)
	    {
	        return this.CandidatoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all candidatos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CandidatoDto> ReadCandidatosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CandidatoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of candidatos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CandidatoDto> ReadCandidatosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CandidatoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a candidato with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CandidatoDto ReadCandidato(string dtoKey)
	    {
	        return this.CandidatoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all candidatos count.
	    /// </summary>
	    /// <returns></returns>
	    public int CandidatosCount()
	    {
	        return this.CandidatoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all candidatos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CandidatosCountFiltered(string filterExpression)
	    {
	        return this.CandidatoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new candidato from the given dto object into the database.
	    /// </summary>
	    /// <param name="candidato">The dto object.</param>
	    /// <returns>The dto key of the newly created candidato.</returns>
	    public string CreateCandidato(CandidatoDto candidato)
	    {
	        string key = this.CandidatoService.Add(candidato);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing candidato in the database from the given dto object.
	    /// </summary>
	    /// <param name="candidato">The dto object.</param>
	    public void UpdateCandidato(CandidatoDto candidato)
	    {
	        this.CandidatoService.Update(candidato);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update candidatos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="candidatos">The dto object list.</param>
	    public void UpdateCandidatos(IEnumerable<CandidatoDto> candidatos)
	    {
	        if (candidatos == null)
	        {
	            return;
	        }
	
	        foreach (CandidatoDto candidato in candidatos)
	        {
	            if (candidato == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCandidato(candidato);
	        }
	    }
	
	    /// <summary>
	    /// Deletes candidato from the database by the given dto object.
	    /// </summary>
	    /// <param name="candidato">The dto object.</param>
	    public void DeleteCandidato(CandidatoDto candidato)
	    {
	        this.CandidatoService.Delete(candidato);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete candidatos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="candidatos">The dto object list.</param>
	    public void DeleteCandidatos(IEnumerable<CandidatoDto> candidatos)
	    {
	        if (candidatos == null)
	        {
	            return;
	        }
	
	        foreach (CandidatoDto candidato in candidatos)
	        {
	            if (candidato == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCandidato(candidato);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against CapoCoalizione entity.
	    /// </summary>
	    private ICapoCoalizioneService capocoalizioneservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against CapoCoalizione entity.
	    /// </summary>
	    public virtual ICapoCoalizioneService CapoCoalizioneService
	    {
	        get
	        {
	            if (this.capocoalizioneservice == null)
	            {
	                ICapoCoalizioneAssembler assembler = new CapoCoalizioneAssembler();
	                ICapoCoalizioneRepository repository = new CapoCoalizioneRepository(this.UnitOfWork);
	
	                this.capocoalizioneservice = new CapoCoalizioneService(assembler, repository);
	            }
	            return this.capocoalizioneservice;
	        }
	    }
	        
	    #region CapoCoaliziones CRUD Operations
	
	    /// <summary>
	    /// Returns all capocoaliziones.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CapoCoalizioneDto> ReadCapoCoaliziones()	
	    {
	        return this.CapoCoalizioneService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of capocoaliziones from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CapoCoalizioneDto> ReadCapoCoalizionesPaged(int startIndex, int pageSize)
	    {
	        return this.CapoCoalizioneService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all capocoaliziones filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CapoCoalizioneDto> ReadCapoCoalizionesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CapoCoalizioneService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of capocoaliziones from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CapoCoalizioneDto> ReadCapoCoalizionesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CapoCoalizioneService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a capocoalizione with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CapoCoalizioneDto ReadCapoCoalizione(string dtoKey)
	    {
	        return this.CapoCoalizioneService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all capocoaliziones count.
	    /// </summary>
	    /// <returns></returns>
	    public int CapoCoalizionesCount()
	    {
	        return this.CapoCoalizioneService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all capocoaliziones count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CapoCoalizionesCountFiltered(string filterExpression)
	    {
	        return this.CapoCoalizioneService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new capocoalizione from the given dto object into the database.
	    /// </summary>
	    /// <param name="capocoalizione">The dto object.</param>
	    /// <returns>The dto key of the newly created capocoalizione.</returns>
	    public string CreateCapoCoalizione(CapoCoalizioneDto capocoalizione)
	    {
	        string key = this.CapoCoalizioneService.Add(capocoalizione);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing capocoalizione in the database from the given dto object.
	    /// </summary>
	    /// <param name="capocoalizione">The dto object.</param>
	    public void UpdateCapoCoalizione(CapoCoalizioneDto capocoalizione)
	    {
	        this.CapoCoalizioneService.Update(capocoalizione);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update capocoaliziones in the database from the given dto object list.
	    /// </summary>
	    /// <param name="capocoaliziones">The dto object list.</param>
	    public void UpdateCapoCoaliziones(IEnumerable<CapoCoalizioneDto> capocoaliziones)
	    {
	        if (capocoaliziones == null)
	        {
	            return;
	        }
	
	        foreach (CapoCoalizioneDto capocoalizione in capocoaliziones)
	        {
	            if (capocoalizione == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCapoCoalizione(capocoalizione);
	        }
	    }
	
	    /// <summary>
	    /// Deletes capocoalizione from the database by the given dto object.
	    /// </summary>
	    /// <param name="capocoalizione">The dto object.</param>
	    public void DeleteCapoCoalizione(CapoCoalizioneDto capocoalizione)
	    {
	        this.CapoCoalizioneService.Delete(capocoalizione);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete capocoaliziones from the database by the given dto object list.
	    /// </summary>
	    /// <param name="capocoaliziones">The dto object list.</param>
	    public void DeleteCapoCoaliziones(IEnumerable<CapoCoalizioneDto> capocoaliziones)
	    {
	        if (capocoaliziones == null)
	        {
	            return;
	        }
	
	        foreach (CapoCoalizioneDto capocoalizione in capocoaliziones)
	        {
	            if (capocoalizione == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCapoCoalizione(capocoalizione);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Collegio entity.
	    /// </summary>
	    private ICollegioService collegioservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Collegio entity.
	    /// </summary>
	    public virtual ICollegioService CollegioService
	    {
	        get
	        {
	            if (this.collegioservice == null)
	            {
	                ICollegioAssembler assembler = new CollegioAssembler();
	                ICollegioRepository repository = new CollegioRepository(this.UnitOfWork);
	
	                this.collegioservice = new CollegioService(assembler, repository);
	            }
	            return this.collegioservice;
	        }
	    }
	        
	    #region Collegios CRUD Operations
	
	    /// <summary>
	    /// Returns all collegios.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CollegioDto> ReadCollegios()	
	    {
	        return this.CollegioService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of collegios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CollegioDto> ReadCollegiosPaged(int startIndex, int pageSize)
	    {
	        return this.CollegioService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all collegios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CollegioDto> ReadCollegiosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CollegioService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of collegios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CollegioDto> ReadCollegiosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CollegioService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a collegio with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CollegioDto ReadCollegio(string dtoKey)
	    {
	        return this.CollegioService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all collegios count.
	    /// </summary>
	    /// <returns></returns>
	    public int CollegiosCount()
	    {
	        return this.CollegioService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all collegios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CollegiosCountFiltered(string filterExpression)
	    {
	        return this.CollegioService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new collegio from the given dto object into the database.
	    /// </summary>
	    /// <param name="collegio">The dto object.</param>
	    /// <returns>The dto key of the newly created collegio.</returns>
	    public string CreateCollegio(CollegioDto collegio)
	    {
	        string key = this.CollegioService.Add(collegio);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing collegio in the database from the given dto object.
	    /// </summary>
	    /// <param name="collegio">The dto object.</param>
	    public void UpdateCollegio(CollegioDto collegio)
	    {
	        this.CollegioService.Update(collegio);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update collegios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="collegios">The dto object list.</param>
	    public void UpdateCollegios(IEnumerable<CollegioDto> collegios)
	    {
	        if (collegios == null)
	        {
	            return;
	        }
	
	        foreach (CollegioDto collegio in collegios)
	        {
	            if (collegio == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCollegio(collegio);
	        }
	    }
	
	    /// <summary>
	    /// Deletes collegio from the database by the given dto object.
	    /// </summary>
	    /// <param name="collegio">The dto object.</param>
	    public void DeleteCollegio(CollegioDto collegio)
	    {
	        this.CollegioService.Delete(collegio);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete collegios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="collegios">The dto object list.</param>
	    public void DeleteCollegios(IEnumerable<CollegioDto> collegios)
	    {
	        if (collegios == null)
	        {
	            return;
	        }
	
	        foreach (CollegioDto collegio in collegios)
	        {
	            if (collegio == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCollegio(collegio);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Comune entity.
	    /// </summary>
	    private IComuneService comuneservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Comune entity.
	    /// </summary>
	    public virtual IComuneService ComuneService
	    {
	        get
	        {
	            if (this.comuneservice == null)
	            {
	                IComuneAssembler assembler = new ComuneAssembler();
	                IComuneRepository repository = new ComuneRepository(this.UnitOfWork);
	
	                this.comuneservice = new ComuneService(assembler, repository);
	            }
	            return this.comuneservice;
	        }
	    }
	        
	    #region Comunes CRUD Operations
	
	    /// <summary>
	    /// Returns all comunes.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ComuneDto> ReadComunes()	
	    {
	        return this.ComuneService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of comunes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ComuneDto> ReadComunesPaged(int startIndex, int pageSize)
	    {
	        return this.ComuneService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all comunes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ComuneDto> ReadComunesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ComuneService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of comunes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ComuneDto> ReadComunesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ComuneService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a comune with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ComuneDto ReadComune(string dtoKey)
	    {
	        return this.ComuneService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all comunes count.
	    /// </summary>
	    /// <returns></returns>
	    public int ComunesCount()
	    {
	        return this.ComuneService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all comunes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ComunesCountFiltered(string filterExpression)
	    {
	        return this.ComuneService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new comune from the given dto object into the database.
	    /// </summary>
	    /// <param name="comune">The dto object.</param>
	    /// <returns>The dto key of the newly created comune.</returns>
	    public string CreateComune(ComuneDto comune)
	    {
	        string key = this.ComuneService.Add(comune);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing comune in the database from the given dto object.
	    /// </summary>
	    /// <param name="comune">The dto object.</param>
	    public void UpdateComune(ComuneDto comune)
	    {
	        this.ComuneService.Update(comune);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update comunes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="comunes">The dto object list.</param>
	    public void UpdateComunes(IEnumerable<ComuneDto> comunes)
	    {
	        if (comunes == null)
	        {
	            return;
	        }
	
	        foreach (ComuneDto comune in comunes)
	        {
	            if (comune == null)
	            {
	                continue;
	            }
	            
	            this.UpdateComune(comune);
	        }
	    }
	
	    /// <summary>
	    /// Deletes comune from the database by the given dto object.
	    /// </summary>
	    /// <param name="comune">The dto object.</param>
	    public void DeleteComune(ComuneDto comune)
	    {
	        this.ComuneService.Delete(comune);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete comunes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="comunes">The dto object list.</param>
	    public void DeleteComunes(IEnumerable<ComuneDto> comunes)
	    {
	        if (comunes == null)
	        {
	            return;
	        }
	
	        foreach (ComuneDto comune in comunes)
	        {
	            if (comune == null)
	            {
	                continue;
	            }
	            
	            this.DeleteComune(comune);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Consultazione entity.
	    /// </summary>
	    private IConsultazioneService consultazioneservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Consultazione entity.
	    /// </summary>
	    public virtual IConsultazioneService ConsultazioneService
	    {
	        get
	        {
	            if (this.consultazioneservice == null)
	            {
	                IConsultazioneAssembler assembler = new ConsultazioneAssembler();
	                IConsultazioneRepository repository = new ConsultazioneRepository(this.UnitOfWork);
	
	                this.consultazioneservice = new ConsultazioneService(assembler, repository);
	            }
	            return this.consultazioneservice;
	        }
	    }
	        
	    #region Consultaziones CRUD Operations
	
	    /// <summary>
	    /// Returns all consultaziones.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ConsultazioneDto> ReadConsultaziones()	
	    {
	        return this.ConsultazioneService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of consultaziones from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ConsultazioneDto> ReadConsultazionesPaged(int startIndex, int pageSize)
	    {
	        return this.ConsultazioneService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all consultaziones filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ConsultazioneDto> ReadConsultazionesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ConsultazioneService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of consultaziones from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ConsultazioneDto> ReadConsultazionesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ConsultazioneService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a consultazione with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ConsultazioneDto ReadConsultazione(string dtoKey)
	    {
	        return this.ConsultazioneService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all consultaziones count.
	    /// </summary>
	    /// <returns></returns>
	    public int ConsultazionesCount()
	    {
	        return this.ConsultazioneService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all consultaziones count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ConsultazionesCountFiltered(string filterExpression)
	    {
	        return this.ConsultazioneService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new consultazione from the given dto object into the database.
	    /// </summary>
	    /// <param name="consultazione">The dto object.</param>
	    /// <returns>The dto key of the newly created consultazione.</returns>
	    public string CreateConsultazione(ConsultazioneDto consultazione)
	    {
	        string key = this.ConsultazioneService.Add(consultazione);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing consultazione in the database from the given dto object.
	    /// </summary>
	    /// <param name="consultazione">The dto object.</param>
	    public void UpdateConsultazione(ConsultazioneDto consultazione)
	    {
	        this.ConsultazioneService.Update(consultazione);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update consultaziones in the database from the given dto object list.
	    /// </summary>
	    /// <param name="consultaziones">The dto object list.</param>
	    public void UpdateConsultaziones(IEnumerable<ConsultazioneDto> consultaziones)
	    {
	        if (consultaziones == null)
	        {
	            return;
	        }
	
	        foreach (ConsultazioneDto consultazione in consultaziones)
	        {
	            if (consultazione == null)
	            {
	                continue;
	            }
	            
	            this.UpdateConsultazione(consultazione);
	        }
	    }
	
	    /// <summary>
	    /// Deletes consultazione from the database by the given dto object.
	    /// </summary>
	    /// <param name="consultazione">The dto object.</param>
	    public void DeleteConsultazione(ConsultazioneDto consultazione)
	    {
	        this.ConsultazioneService.Delete(consultazione);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete consultaziones from the database by the given dto object list.
	    /// </summary>
	    /// <param name="consultaziones">The dto object list.</param>
	    public void DeleteConsultaziones(IEnumerable<ConsultazioneDto> consultaziones)
	    {
	        if (consultaziones == null)
	        {
	            return;
	        }
	
	        foreach (ConsultazioneDto consultazione in consultaziones)
	        {
	            if (consultazione == null)
	            {
	                continue;
	            }
	            
	            this.DeleteConsultazione(consultazione);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Lista entity.
	    /// </summary>
	    private IListaService listaservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Lista entity.
	    /// </summary>
	    public virtual IListaService ListaService
	    {
	        get
	        {
	            if (this.listaservice == null)
	            {
	                IListaAssembler assembler = new ListaAssembler();
	                IListaRepository repository = new ListaRepository(this.UnitOfWork);
	
	                this.listaservice = new ListaService(assembler, repository);
	            }
	            return this.listaservice;
	        }
	    }
	        
	    #region Listas CRUD Operations
	
	    /// <summary>
	    /// Returns all listas.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ListaDto> ReadListas()	
	    {
	        return this.ListaService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of listas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ListaDto> ReadListasPaged(int startIndex, int pageSize)
	    {
	        return this.ListaService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all listas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ListaDto> ReadListasFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ListaService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of listas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ListaDto> ReadListasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ListaService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a lista with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ListaDto ReadLista(string dtoKey)
	    {
	        return this.ListaService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all listas count.
	    /// </summary>
	    /// <returns></returns>
	    public int ListasCount()
	    {
	        return this.ListaService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all listas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ListasCountFiltered(string filterExpression)
	    {
	        return this.ListaService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new lista from the given dto object into the database.
	    /// </summary>
	    /// <param name="lista">The dto object.</param>
	    /// <returns>The dto key of the newly created lista.</returns>
	    public string CreateLista(ListaDto lista)
	    {
	        string key = this.ListaService.Add(lista);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing lista in the database from the given dto object.
	    /// </summary>
	    /// <param name="lista">The dto object.</param>
	    public void UpdateLista(ListaDto lista)
	    {
	        this.ListaService.Update(lista);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update listas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="listas">The dto object list.</param>
	    public void UpdateListas(IEnumerable<ListaDto> listas)
	    {
	        if (listas == null)
	        {
	            return;
	        }
	
	        foreach (ListaDto lista in listas)
	        {
	            if (lista == null)
	            {
	                continue;
	            }
	            
	            this.UpdateLista(lista);
	        }
	    }
	
	    /// <summary>
	    /// Deletes lista from the database by the given dto object.
	    /// </summary>
	    /// <param name="lista">The dto object.</param>
	    public void DeleteLista(ListaDto lista)
	    {
	        this.ListaService.Delete(lista);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete listas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="listas">The dto object list.</param>
	    public void DeleteListas(IEnumerable<ListaDto> listas)
	    {
	        if (listas == null)
	        {
	            return;
	        }
	
	        foreach (ListaDto lista in listas)
	        {
	            if (lista == null)
	            {
	                continue;
	            }
	            
	            this.DeleteLista(lista);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Operatore entity.
	    /// </summary>
	    private IOperatoreService operatoreservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Operatore entity.
	    /// </summary>
	    public virtual IOperatoreService OperatoreService
	    {
	        get
	        {
	            if (this.operatoreservice == null)
	            {
	                IOperatoreAssembler assembler = new OperatoreAssembler();
	                IOperatoreRepository repository = new OperatoreRepository(this.UnitOfWork);
	
	                this.operatoreservice = new OperatoreService(assembler, repository);
	            }
	            return this.operatoreservice;
	        }
	    }
	        
	    #region Operatores CRUD Operations
	
	    /// <summary>
	    /// Returns all operatores.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<OperatoreDto> ReadOperatores()	
	    {
	        return this.OperatoreService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of operatores from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<OperatoreDto> ReadOperatoresPaged(int startIndex, int pageSize)
	    {
	        return this.OperatoreService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all operatores filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<OperatoreDto> ReadOperatoresFiltered(string sortExpression, string filterExpression)
	    {
	        return this.OperatoreService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of operatores from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<OperatoreDto> ReadOperatoresPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.OperatoreService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a operatore with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public OperatoreDto ReadOperatore(string dtoKey)
	    {
	        return this.OperatoreService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all operatores count.
	    /// </summary>
	    /// <returns></returns>
	    public int OperatoresCount()
	    {
	        return this.OperatoreService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all operatores count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int OperatoresCountFiltered(string filterExpression)
	    {
	        return this.OperatoreService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new operatore from the given dto object into the database.
	    /// </summary>
	    /// <param name="operatore">The dto object.</param>
	    /// <returns>The dto key of the newly created operatore.</returns>
	    public string CreateOperatore(OperatoreDto operatore)
	    {
	        string key = this.OperatoreService.Add(operatore);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing operatore in the database from the given dto object.
	    /// </summary>
	    /// <param name="operatore">The dto object.</param>
	    public void UpdateOperatore(OperatoreDto operatore)
	    {
	        this.OperatoreService.Update(operatore);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update operatores in the database from the given dto object list.
	    /// </summary>
	    /// <param name="operatores">The dto object list.</param>
	    public void UpdateOperatores(IEnumerable<OperatoreDto> operatores)
	    {
	        if (operatores == null)
	        {
	            return;
	        }
	
	        foreach (OperatoreDto operatore in operatores)
	        {
	            if (operatore == null)
	            {
	                continue;
	            }
	            
	            this.UpdateOperatore(operatore);
	        }
	    }
	
	    /// <summary>
	    /// Deletes operatore from the database by the given dto object.
	    /// </summary>
	    /// <param name="operatore">The dto object.</param>
	    public void DeleteOperatore(OperatoreDto operatore)
	    {
	        this.OperatoreService.Delete(operatore);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete operatores from the database by the given dto object list.
	    /// </summary>
	    /// <param name="operatores">The dto object list.</param>
	    public void DeleteOperatores(IEnumerable<OperatoreDto> operatores)
	    {
	        if (operatores == null)
	        {
	            return;
	        }
	
	        foreach (OperatoreDto operatore in operatores)
	        {
	            if (operatore == null)
	            {
	                continue;
	            }
	            
	            this.DeleteOperatore(operatore);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Rilevamento entity.
	    /// </summary>
	    private IRilevamentoService rilevamentoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Rilevamento entity.
	    /// </summary>
	    public virtual IRilevamentoService RilevamentoService
	    {
	        get
	        {
	            if (this.rilevamentoservice == null)
	            {
	                IRilevamentoAssembler assembler = new RilevamentoAssembler();
	                IRilevamentoRepository repository = new RilevamentoRepository(this.UnitOfWork);
	
	                this.rilevamentoservice = new RilevamentoService(assembler, repository);
	            }
	            return this.rilevamentoservice;
	        }
	    }
	        
	    #region Rilevamentos CRUD Operations
	
	    /// <summary>
	    /// Returns all rilevamentos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<RilevamentoDto> ReadRilevamentos()	
	    {
	        return this.RilevamentoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of rilevamentos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<RilevamentoDto> ReadRilevamentosPaged(int startIndex, int pageSize)
	    {
	        return this.RilevamentoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all rilevamentos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RilevamentoDto> ReadRilevamentosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.RilevamentoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of rilevamentos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RilevamentoDto> ReadRilevamentosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.RilevamentoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a rilevamento with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public RilevamentoDto ReadRilevamento(string dtoKey)
	    {
	        return this.RilevamentoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all rilevamentos count.
	    /// </summary>
	    /// <returns></returns>
	    public int RilevamentosCount()
	    {
	        return this.RilevamentoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all rilevamentos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int RilevamentosCountFiltered(string filterExpression)
	    {
	        return this.RilevamentoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new rilevamento from the given dto object into the database.
	    /// </summary>
	    /// <param name="rilevamento">The dto object.</param>
	    /// <returns>The dto key of the newly created rilevamento.</returns>
	    public string CreateRilevamento(RilevamentoDto rilevamento)
	    {
	        string key = this.RilevamentoService.Add(rilevamento);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing rilevamento in the database from the given dto object.
	    /// </summary>
	    /// <param name="rilevamento">The dto object.</param>
	    public void UpdateRilevamento(RilevamentoDto rilevamento)
	    {
	        this.RilevamentoService.Update(rilevamento);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update rilevamentos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="rilevamentos">The dto object list.</param>
	    public void UpdateRilevamentos(IEnumerable<RilevamentoDto> rilevamentos)
	    {
	        if (rilevamentos == null)
	        {
	            return;
	        }
	
	        foreach (RilevamentoDto rilevamento in rilevamentos)
	        {
	            if (rilevamento == null)
	            {
	                continue;
	            }
	            
	            this.UpdateRilevamento(rilevamento);
	        }
	    }
	
	    /// <summary>
	    /// Deletes rilevamento from the database by the given dto object.
	    /// </summary>
	    /// <param name="rilevamento">The dto object.</param>
	    public void DeleteRilevamento(RilevamentoDto rilevamento)
	    {
	        this.RilevamentoService.Delete(rilevamento);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete rilevamentos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="rilevamentos">The dto object list.</param>
	    public void DeleteRilevamentos(IEnumerable<RilevamentoDto> rilevamentos)
	    {
	        if (rilevamentos == null)
	        {
	            return;
	        }
	
	        foreach (RilevamentoDto rilevamento in rilevamentos)
	        {
	            if (rilevamento == null)
	            {
	                continue;
	            }
	            
	            this.DeleteRilevamento(rilevamento);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Scrutinio entity.
	    /// </summary>
	    private IScrutinioService scrutinioservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Scrutinio entity.
	    /// </summary>
	    public virtual IScrutinioService ScrutinioService
	    {
	        get
	        {
	            if (this.scrutinioservice == null)
	            {
	                IScrutinioAssembler assembler = new ScrutinioAssembler();
	                IScrutinioRepository repository = new ScrutinioRepository(this.UnitOfWork);
	
	                this.scrutinioservice = new ScrutinioService(assembler, repository);
	            }
	            return this.scrutinioservice;
	        }
	    }
	        
	    #region Scrutinios CRUD Operations
	
	    /// <summary>
	    /// Returns all scrutinios.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ScrutinioDto> ReadScrutinios()	
	    {
	        return this.ScrutinioService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of scrutinios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ScrutinioDto> ReadScrutiniosPaged(int startIndex, int pageSize)
	    {
	        return this.ScrutinioService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all scrutinios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ScrutinioDto> ReadScrutiniosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ScrutinioService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of scrutinios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ScrutinioDto> ReadScrutiniosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ScrutinioService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a scrutinio with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ScrutinioDto ReadScrutinio(string dtoKey)
	    {
	        return this.ScrutinioService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all scrutinios count.
	    /// </summary>
	    /// <returns></returns>
	    public int ScrutiniosCount()
	    {
	        return this.ScrutinioService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all scrutinios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ScrutiniosCountFiltered(string filterExpression)
	    {
	        return this.ScrutinioService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new scrutinio from the given dto object into the database.
	    /// </summary>
	    /// <param name="scrutinio">The dto object.</param>
	    /// <returns>The dto key of the newly created scrutinio.</returns>
	    public string CreateScrutinio(ScrutinioDto scrutinio)
	    {
	        string key = this.ScrutinioService.Add(scrutinio);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing scrutinio in the database from the given dto object.
	    /// </summary>
	    /// <param name="scrutinio">The dto object.</param>
	    public void UpdateScrutinio(ScrutinioDto scrutinio)
	    {
	        this.ScrutinioService.Update(scrutinio);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update scrutinios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="scrutinios">The dto object list.</param>
	    public void UpdateScrutinios(IEnumerable<ScrutinioDto> scrutinios)
	    {
	        if (scrutinios == null)
	        {
	            return;
	        }
	
	        foreach (ScrutinioDto scrutinio in scrutinios)
	        {
	            if (scrutinio == null)
	            {
	                continue;
	            }
	            
	            this.UpdateScrutinio(scrutinio);
	        }
	    }
	
	    /// <summary>
	    /// Deletes scrutinio from the database by the given dto object.
	    /// </summary>
	    /// <param name="scrutinio">The dto object.</param>
	    public void DeleteScrutinio(ScrutinioDto scrutinio)
	    {
	        this.ScrutinioService.Delete(scrutinio);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete scrutinios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="scrutinios">The dto object list.</param>
	    public void DeleteScrutinios(IEnumerable<ScrutinioDto> scrutinios)
	    {
	        if (scrutinios == null)
	        {
	            return;
	        }
	
	        foreach (ScrutinioDto scrutinio in scrutinios)
	        {
	            if (scrutinio == null)
	            {
	                continue;
	            }
	            
	            this.DeleteScrutinio(scrutinio);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against ScrutinioCandidato entity.
	    /// </summary>
	    private IScrutinioCandidatoService scrutiniocandidatoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against ScrutinioCandidato entity.
	    /// </summary>
	    public virtual IScrutinioCandidatoService ScrutinioCandidatoService
	    {
	        get
	        {
	            if (this.scrutiniocandidatoservice == null)
	            {
	                IScrutinioCandidatoAssembler assembler = new ScrutinioCandidatoAssembler();
	                IScrutinioCandidatoRepository repository = new ScrutinioCandidatoRepository(this.UnitOfWork);
	
	                this.scrutiniocandidatoservice = new ScrutinioCandidatoService(assembler, repository);
	            }
	            return this.scrutiniocandidatoservice;
	        }
	    }
	        
	    #region ScrutinioCandidatos CRUD Operations
	
	    /// <summary>
	    /// Returns all scrutiniocandidatos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ScrutinioCandidatoDto> ReadScrutinioCandidatos()	
	    {
	        return this.ScrutinioCandidatoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of scrutiniocandidatos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ScrutinioCandidatoDto> ReadScrutinioCandidatosPaged(int startIndex, int pageSize)
	    {
	        return this.ScrutinioCandidatoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all scrutiniocandidatos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ScrutinioCandidatoDto> ReadScrutinioCandidatosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ScrutinioCandidatoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of scrutiniocandidatos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ScrutinioCandidatoDto> ReadScrutinioCandidatosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ScrutinioCandidatoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a scrutiniocandidato with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ScrutinioCandidatoDto ReadScrutinioCandidato(string dtoKey)
	    {
	        return this.ScrutinioCandidatoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all scrutiniocandidatos count.
	    /// </summary>
	    /// <returns></returns>
	    public int ScrutinioCandidatosCount()
	    {
	        return this.ScrutinioCandidatoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all scrutiniocandidatos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ScrutinioCandidatosCountFiltered(string filterExpression)
	    {
	        return this.ScrutinioCandidatoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new scrutiniocandidato from the given dto object into the database.
	    /// </summary>
	    /// <param name="scrutiniocandidato">The dto object.</param>
	    /// <returns>The dto key of the newly created scrutiniocandidato.</returns>
	    public string CreateScrutinioCandidato(ScrutinioCandidatoDto scrutiniocandidato)
	    {
	        string key = this.ScrutinioCandidatoService.Add(scrutiniocandidato);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing scrutiniocandidato in the database from the given dto object.
	    /// </summary>
	    /// <param name="scrutiniocandidato">The dto object.</param>
	    public void UpdateScrutinioCandidato(ScrutinioCandidatoDto scrutiniocandidato)
	    {
	        this.ScrutinioCandidatoService.Update(scrutiniocandidato);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update scrutiniocandidatos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="scrutiniocandidatos">The dto object list.</param>
	    public void UpdateScrutinioCandidatos(IEnumerable<ScrutinioCandidatoDto> scrutiniocandidatos)
	    {
	        if (scrutiniocandidatos == null)
	        {
	            return;
	        }
	
	        foreach (ScrutinioCandidatoDto scrutiniocandidato in scrutiniocandidatos)
	        {
	            if (scrutiniocandidato == null)
	            {
	                continue;
	            }
	            
	            this.UpdateScrutinioCandidato(scrutiniocandidato);
	        }
	    }
	
	    /// <summary>
	    /// Deletes scrutiniocandidato from the database by the given dto object.
	    /// </summary>
	    /// <param name="scrutiniocandidato">The dto object.</param>
	    public void DeleteScrutinioCandidato(ScrutinioCandidatoDto scrutiniocandidato)
	    {
	        this.ScrutinioCandidatoService.Delete(scrutiniocandidato);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete scrutiniocandidatos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="scrutiniocandidatos">The dto object list.</param>
	    public void DeleteScrutinioCandidatos(IEnumerable<ScrutinioCandidatoDto> scrutiniocandidatos)
	    {
	        if (scrutiniocandidatos == null)
	        {
	            return;
	        }
	
	        foreach (ScrutinioCandidatoDto scrutiniocandidato in scrutiniocandidatos)
	        {
	            if (scrutiniocandidato == null)
	            {
	                continue;
	            }
	            
	            this.DeleteScrutinioCandidato(scrutiniocandidato);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against ScrutinioCapoCoalizione entity.
	    /// </summary>
	    private IScrutinioCapoCoalizioneService scrutiniocapocoalizioneservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against ScrutinioCapoCoalizione entity.
	    /// </summary>
	    public virtual IScrutinioCapoCoalizioneService ScrutinioCapoCoalizioneService
	    {
	        get
	        {
	            if (this.scrutiniocapocoalizioneservice == null)
	            {
	                IScrutinioCapoCoalizioneAssembler assembler = new ScrutinioCapoCoalizioneAssembler();
	                IScrutinioCapoCoalizioneRepository repository = new ScrutinioCapoCoalizioneRepository(this.UnitOfWork);
	
	                this.scrutiniocapocoalizioneservice = new ScrutinioCapoCoalizioneService(assembler, repository);
	            }
	            return this.scrutiniocapocoalizioneservice;
	        }
	    }
	        
	    #region ScrutinioCapoCoaliziones CRUD Operations
	
	    /// <summary>
	    /// Returns all scrutiniocapocoaliziones.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ScrutinioCapoCoalizioneDto> ReadScrutinioCapoCoaliziones()	
	    {
	        return this.ScrutinioCapoCoalizioneService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of scrutiniocapocoaliziones from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ScrutinioCapoCoalizioneDto> ReadScrutinioCapoCoalizionesPaged(int startIndex, int pageSize)
	    {
	        return this.ScrutinioCapoCoalizioneService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all scrutiniocapocoaliziones filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ScrutinioCapoCoalizioneDto> ReadScrutinioCapoCoalizionesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ScrutinioCapoCoalizioneService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of scrutiniocapocoaliziones from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ScrutinioCapoCoalizioneDto> ReadScrutinioCapoCoalizionesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ScrutinioCapoCoalizioneService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a scrutiniocapocoalizione with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ScrutinioCapoCoalizioneDto ReadScrutinioCapoCoalizione(string dtoKey)
	    {
	        return this.ScrutinioCapoCoalizioneService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all scrutiniocapocoaliziones count.
	    /// </summary>
	    /// <returns></returns>
	    public int ScrutinioCapoCoalizionesCount()
	    {
	        return this.ScrutinioCapoCoalizioneService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all scrutiniocapocoaliziones count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ScrutinioCapoCoalizionesCountFiltered(string filterExpression)
	    {
	        return this.ScrutinioCapoCoalizioneService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new scrutiniocapocoalizione from the given dto object into the database.
	    /// </summary>
	    /// <param name="scrutiniocapocoalizione">The dto object.</param>
	    /// <returns>The dto key of the newly created scrutiniocapocoalizione.</returns>
	    public string CreateScrutinioCapoCoalizione(ScrutinioCapoCoalizioneDto scrutiniocapocoalizione)
	    {
	        string key = this.ScrutinioCapoCoalizioneService.Add(scrutiniocapocoalizione);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing scrutiniocapocoalizione in the database from the given dto object.
	    /// </summary>
	    /// <param name="scrutiniocapocoalizione">The dto object.</param>
	    public void UpdateScrutinioCapoCoalizione(ScrutinioCapoCoalizioneDto scrutiniocapocoalizione)
	    {
	        this.ScrutinioCapoCoalizioneService.Update(scrutiniocapocoalizione);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update scrutiniocapocoaliziones in the database from the given dto object list.
	    /// </summary>
	    /// <param name="scrutiniocapocoaliziones">The dto object list.</param>
	    public void UpdateScrutinioCapoCoaliziones(IEnumerable<ScrutinioCapoCoalizioneDto> scrutiniocapocoaliziones)
	    {
	        if (scrutiniocapocoaliziones == null)
	        {
	            return;
	        }
	
	        foreach (ScrutinioCapoCoalizioneDto scrutiniocapocoalizione in scrutiniocapocoaliziones)
	        {
	            if (scrutiniocapocoalizione == null)
	            {
	                continue;
	            }
	            
	            this.UpdateScrutinioCapoCoalizione(scrutiniocapocoalizione);
	        }
	    }
	
	    /// <summary>
	    /// Deletes scrutiniocapocoalizione from the database by the given dto object.
	    /// </summary>
	    /// <param name="scrutiniocapocoalizione">The dto object.</param>
	    public void DeleteScrutinioCapoCoalizione(ScrutinioCapoCoalizioneDto scrutiniocapocoalizione)
	    {
	        this.ScrutinioCapoCoalizioneService.Delete(scrutiniocapocoalizione);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete scrutiniocapocoaliziones from the database by the given dto object list.
	    /// </summary>
	    /// <param name="scrutiniocapocoaliziones">The dto object list.</param>
	    public void DeleteScrutinioCapoCoaliziones(IEnumerable<ScrutinioCapoCoalizioneDto> scrutiniocapocoaliziones)
	    {
	        if (scrutiniocapocoaliziones == null)
	        {
	            return;
	        }
	
	        foreach (ScrutinioCapoCoalizioneDto scrutiniocapocoalizione in scrutiniocapocoaliziones)
	        {
	            if (scrutiniocapocoalizione == null)
	            {
	                continue;
	            }
	            
	            this.DeleteScrutinioCapoCoalizione(scrutiniocapocoalizione);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against ScrutinioLista entity.
	    /// </summary>
	    private IScrutinioListaService scrutiniolistaservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against ScrutinioLista entity.
	    /// </summary>
	    public virtual IScrutinioListaService ScrutinioListaService
	    {
	        get
	        {
	            if (this.scrutiniolistaservice == null)
	            {
	                IScrutinioListaAssembler assembler = new ScrutinioListaAssembler();
	                IScrutinioListaRepository repository = new ScrutinioListaRepository(this.UnitOfWork);
	
	                this.scrutiniolistaservice = new ScrutinioListaService(assembler, repository);
	            }
	            return this.scrutiniolistaservice;
	        }
	    }
	        
	    #region ScrutinioListas CRUD Operations
	
	    /// <summary>
	    /// Returns all scrutiniolistas.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ScrutinioListaDto> ReadScrutinioListas()	
	    {
	        return this.ScrutinioListaService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of scrutiniolistas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ScrutinioListaDto> ReadScrutinioListasPaged(int startIndex, int pageSize)
	    {
	        return this.ScrutinioListaService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all scrutiniolistas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ScrutinioListaDto> ReadScrutinioListasFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ScrutinioListaService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of scrutiniolistas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ScrutinioListaDto> ReadScrutinioListasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ScrutinioListaService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a scrutiniolista with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ScrutinioListaDto ReadScrutinioLista(string dtoKey)
	    {
	        return this.ScrutinioListaService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all scrutiniolistas count.
	    /// </summary>
	    /// <returns></returns>
	    public int ScrutinioListasCount()
	    {
	        return this.ScrutinioListaService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all scrutiniolistas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ScrutinioListasCountFiltered(string filterExpression)
	    {
	        return this.ScrutinioListaService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new scrutiniolista from the given dto object into the database.
	    /// </summary>
	    /// <param name="scrutiniolista">The dto object.</param>
	    /// <returns>The dto key of the newly created scrutiniolista.</returns>
	    public string CreateScrutinioLista(ScrutinioListaDto scrutiniolista)
	    {
	        string key = this.ScrutinioListaService.Add(scrutiniolista);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing scrutiniolista in the database from the given dto object.
	    /// </summary>
	    /// <param name="scrutiniolista">The dto object.</param>
	    public void UpdateScrutinioLista(ScrutinioListaDto scrutiniolista)
	    {
	        this.ScrutinioListaService.Update(scrutiniolista);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update scrutiniolistas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="scrutiniolistas">The dto object list.</param>
	    public void UpdateScrutinioListas(IEnumerable<ScrutinioListaDto> scrutiniolistas)
	    {
	        if (scrutiniolistas == null)
	        {
	            return;
	        }
	
	        foreach (ScrutinioListaDto scrutiniolista in scrutiniolistas)
	        {
	            if (scrutiniolista == null)
	            {
	                continue;
	            }
	            
	            this.UpdateScrutinioLista(scrutiniolista);
	        }
	    }
	
	    /// <summary>
	    /// Deletes scrutiniolista from the database by the given dto object.
	    /// </summary>
	    /// <param name="scrutiniolista">The dto object.</param>
	    public void DeleteScrutinioLista(ScrutinioListaDto scrutiniolista)
	    {
	        this.ScrutinioListaService.Delete(scrutiniolista);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete scrutiniolistas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="scrutiniolistas">The dto object list.</param>
	    public void DeleteScrutinioListas(IEnumerable<ScrutinioListaDto> scrutiniolistas)
	    {
	        if (scrutiniolistas == null)
	        {
	            return;
	        }
	
	        foreach (ScrutinioListaDto scrutiniolista in scrutiniolistas)
	        {
	            if (scrutiniolista == null)
	            {
	                continue;
	            }
	            
	            this.DeleteScrutinioLista(scrutiniolista);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against SedeElettorale entity.
	    /// </summary>
	    private ISedeElettoraleService sedeelettoraleservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against SedeElettorale entity.
	    /// </summary>
	    public virtual ISedeElettoraleService SedeElettoraleService
	    {
	        get
	        {
	            if (this.sedeelettoraleservice == null)
	            {
	                ISedeElettoraleAssembler assembler = new SedeElettoraleAssembler();
	                ISedeElettoraleRepository repository = new SedeElettoraleRepository(this.UnitOfWork);
	
	                this.sedeelettoraleservice = new SedeElettoraleService(assembler, repository);
	            }
	            return this.sedeelettoraleservice;
	        }
	    }
	        
	    #region SedeElettorales CRUD Operations
	
	    /// <summary>
	    /// Returns all sedeelettorales.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<SedeElettoraleDto> ReadSedeElettorales()	
	    {
	        return this.SedeElettoraleService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sedeelettorales from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<SedeElettoraleDto> ReadSedeElettoralesPaged(int startIndex, int pageSize)
	    {
	        return this.SedeElettoraleService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all sedeelettorales filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SedeElettoraleDto> ReadSedeElettoralesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.SedeElettoraleService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sedeelettorales from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SedeElettoraleDto> ReadSedeElettoralesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.SedeElettoraleService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a sedeelettorale with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public SedeElettoraleDto ReadSedeElettorale(string dtoKey)
	    {
	        return this.SedeElettoraleService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all sedeelettorales count.
	    /// </summary>
	    /// <returns></returns>
	    public int SedeElettoralesCount()
	    {
	        return this.SedeElettoraleService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all sedeelettorales count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int SedeElettoralesCountFiltered(string filterExpression)
	    {
	        return this.SedeElettoraleService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new sedeelettorale from the given dto object into the database.
	    /// </summary>
	    /// <param name="sedeelettorale">The dto object.</param>
	    /// <returns>The dto key of the newly created sedeelettorale.</returns>
	    public string CreateSedeElettorale(SedeElettoraleDto sedeelettorale)
	    {
	        string key = this.SedeElettoraleService.Add(sedeelettorale);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing sedeelettorale in the database from the given dto object.
	    /// </summary>
	    /// <param name="sedeelettorale">The dto object.</param>
	    public void UpdateSedeElettorale(SedeElettoraleDto sedeelettorale)
	    {
	        this.SedeElettoraleService.Update(sedeelettorale);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update sedeelettorales in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sedeelettorales">The dto object list.</param>
	    public void UpdateSedeElettorales(IEnumerable<SedeElettoraleDto> sedeelettorales)
	    {
	        if (sedeelettorales == null)
	        {
	            return;
	        }
	
	        foreach (SedeElettoraleDto sedeelettorale in sedeelettorales)
	        {
	            if (sedeelettorale == null)
	            {
	                continue;
	            }
	            
	            this.UpdateSedeElettorale(sedeelettorale);
	        }
	    }
	
	    /// <summary>
	    /// Deletes sedeelettorale from the database by the given dto object.
	    /// </summary>
	    /// <param name="sedeelettorale">The dto object.</param>
	    public void DeleteSedeElettorale(SedeElettoraleDto sedeelettorale)
	    {
	        this.SedeElettoraleService.Delete(sedeelettorale);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete sedeelettorales from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sedeelettorales">The dto object list.</param>
	    public void DeleteSedeElettorales(IEnumerable<SedeElettoraleDto> sedeelettorales)
	    {
	        if (sedeelettorales == null)
	        {
	            return;
	        }
	
	        foreach (SedeElettoraleDto sedeelettorale in sedeelettorales)
	        {
	            if (sedeelettorale == null)
	            {
	                continue;
	            }
	            
	            this.DeleteSedeElettorale(sedeelettorale);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Sezione entity.
	    /// </summary>
	    private ISezioneService sezioneservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Sezione entity.
	    /// </summary>
	    public virtual ISezioneService SezioneService
	    {
	        get
	        {
	            if (this.sezioneservice == null)
	            {
	                ISezioneAssembler assembler = new SezioneAssembler();
	                ISezioneRepository repository = new SezioneRepository(this.UnitOfWork);
	
	                this.sezioneservice = new SezioneService(assembler, repository);
	            }
	            return this.sezioneservice;
	        }
	    }
	        
	    #region Seziones CRUD Operations
	
	    /// <summary>
	    /// Returns all seziones.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<SezioneDto> ReadSeziones()	
	    {
	        return this.SezioneService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of seziones from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<SezioneDto> ReadSezionesPaged(int startIndex, int pageSize)
	    {
	        return this.SezioneService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all seziones filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SezioneDto> ReadSezionesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.SezioneService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of seziones from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SezioneDto> ReadSezionesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.SezioneService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a sezione with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public SezioneDto ReadSezione(string dtoKey)
	    {
	        return this.SezioneService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all seziones count.
	    /// </summary>
	    /// <returns></returns>
	    public int SezionesCount()
	    {
	        return this.SezioneService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all seziones count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int SezionesCountFiltered(string filterExpression)
	    {
	        return this.SezioneService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new sezione from the given dto object into the database.
	    /// </summary>
	    /// <param name="sezione">The dto object.</param>
	    /// <returns>The dto key of the newly created sezione.</returns>
	    public string CreateSezione(SezioneDto sezione)
	    {
	        string key = this.SezioneService.Add(sezione);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing sezione in the database from the given dto object.
	    /// </summary>
	    /// <param name="sezione">The dto object.</param>
	    public void UpdateSezione(SezioneDto sezione)
	    {
	        this.SezioneService.Update(sezione);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update seziones in the database from the given dto object list.
	    /// </summary>
	    /// <param name="seziones">The dto object list.</param>
	    public void UpdateSeziones(IEnumerable<SezioneDto> seziones)
	    {
	        if (seziones == null)
	        {
	            return;
	        }
	
	        foreach (SezioneDto sezione in seziones)
	        {
	            if (sezione == null)
	            {
	                continue;
	            }
	            
	            this.UpdateSezione(sezione);
	        }
	    }
	
	    /// <summary>
	    /// Deletes sezione from the database by the given dto object.
	    /// </summary>
	    /// <param name="sezione">The dto object.</param>
	    public void DeleteSezione(SezioneDto sezione)
	    {
	        this.SezioneService.Delete(sezione);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete seziones from the database by the given dto object list.
	    /// </summary>
	    /// <param name="seziones">The dto object list.</param>
	    public void DeleteSeziones(IEnumerable<SezioneDto> seziones)
	    {
	        if (seziones == null)
	        {
	            return;
	        }
	
	        foreach (SezioneDto sezione in seziones)
	        {
	            if (sezione == null)
	            {
	                continue;
	            }
	            
	            this.DeleteSezione(sezione);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against SezioneCollegio entity.
	    /// </summary>
	    private ISezioneCollegioService sezionecollegioservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against SezioneCollegio entity.
	    /// </summary>
	    public virtual ISezioneCollegioService SezioneCollegioService
	    {
	        get
	        {
	            if (this.sezionecollegioservice == null)
	            {
	                ISezioneCollegioAssembler assembler = new SezioneCollegioAssembler();
	                ISezioneCollegioRepository repository = new SezioneCollegioRepository(this.UnitOfWork);
	
	                this.sezionecollegioservice = new SezioneCollegioService(assembler, repository);
	            }
	            return this.sezionecollegioservice;
	        }
	    }
	        
	    #region SezioneCollegios CRUD Operations
	
	    /// <summary>
	    /// Returns all sezionecollegios.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<SezioneCollegioDto> ReadSezioneCollegios()	
	    {
	        return this.SezioneCollegioService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sezionecollegios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<SezioneCollegioDto> ReadSezioneCollegiosPaged(int startIndex, int pageSize)
	    {
	        return this.SezioneCollegioService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all sezionecollegios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SezioneCollegioDto> ReadSezioneCollegiosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.SezioneCollegioService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sezionecollegios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SezioneCollegioDto> ReadSezioneCollegiosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.SezioneCollegioService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a sezionecollegio with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public SezioneCollegioDto ReadSezioneCollegio(string dtoKey)
	    {
	        return this.SezioneCollegioService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all sezionecollegios count.
	    /// </summary>
	    /// <returns></returns>
	    public int SezioneCollegiosCount()
	    {
	        return this.SezioneCollegioService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all sezionecollegios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int SezioneCollegiosCountFiltered(string filterExpression)
	    {
	        return this.SezioneCollegioService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new sezionecollegio from the given dto object into the database.
	    /// </summary>
	    /// <param name="sezionecollegio">The dto object.</param>
	    /// <returns>The dto key of the newly created sezionecollegio.</returns>
	    public string CreateSezioneCollegio(SezioneCollegioDto sezionecollegio)
	    {
	        string key = this.SezioneCollegioService.Add(sezionecollegio);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing sezionecollegio in the database from the given dto object.
	    /// </summary>
	    /// <param name="sezionecollegio">The dto object.</param>
	    public void UpdateSezioneCollegio(SezioneCollegioDto sezionecollegio)
	    {
	        this.SezioneCollegioService.Update(sezionecollegio);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update sezionecollegios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sezionecollegios">The dto object list.</param>
	    public void UpdateSezioneCollegios(IEnumerable<SezioneCollegioDto> sezionecollegios)
	    {
	        if (sezionecollegios == null)
	        {
	            return;
	        }
	
	        foreach (SezioneCollegioDto sezionecollegio in sezionecollegios)
	        {
	            if (sezionecollegio == null)
	            {
	                continue;
	            }
	            
	            this.UpdateSezioneCollegio(sezionecollegio);
	        }
	    }
	
	    /// <summary>
	    /// Deletes sezionecollegio from the database by the given dto object.
	    /// </summary>
	    /// <param name="sezionecollegio">The dto object.</param>
	    public void DeleteSezioneCollegio(SezioneCollegioDto sezionecollegio)
	    {
	        this.SezioneCollegioService.Delete(sezionecollegio);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete sezionecollegios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sezionecollegios">The dto object list.</param>
	    public void DeleteSezioneCollegios(IEnumerable<SezioneCollegioDto> sezionecollegios)
	    {
	        if (sezionecollegios == null)
	        {
	            return;
	        }
	
	        foreach (SezioneCollegioDto sezionecollegio in sezionecollegios)
	        {
	            if (sezionecollegio == null)
	            {
	                continue;
	            }
	            
	            this.DeleteSezioneCollegio(sezionecollegio);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// EntitiesModelService finalizer.
	    /// </summary>
	    ~EntitiesModelService()
	    {
	        IDisposable context = this.unitOfWork as IDisposable;
	        if(context != null)
	        {
	            context.Dispose();
	        }
	    }
	}
}
#pragma warning restore 1591
