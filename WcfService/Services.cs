#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace WcfService.Services
{
	using Telerik.OpenAccess;
	using System.Linq.Dynamic;
	using DataLayer;
	using WcfService.Dto;
	using WcfService.Assemblers;
	using WcfService.Repositories;
	using WcfService.Converters;
	using System;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.Serialization;

	
	public partial interface IService<TDto, TEntity>
	    where TEntity : class
		where TDto : IDtoWithKey
	{
	    IAssembler<TDto, TEntity> Assembler { get; }
	    IRepository<TEntity> Repository { get; }
	
	    IEnumerable<TDto> Find(Expression<Func<TEntity, bool>> filter);
	    IEnumerable<TDto> GetAll();
		
		IEnumerable<TDto> Find(int startRowIndex, int maximumRows);
	    IEnumerable<TDto> Find(string sortExpression, string filterExpression);
	    IEnumerable<TDto> Find(int? startRowIndex, int? maximumRows, string sortExpression, string filterExpression);
	    
		int Count();
	    int Count(string filterExpression);
		
		TDto GetByKey(string dtoKey);
	    string Add(TDto dto);
		void Update(TDto dto);
	    void Delete(TDto dto);	
	}
	
	public abstract partial class Service<TDto, TEntity> : IService<TDto, TEntity>
	    where TEntity : class
		where TDto : IDtoWithKey
	{
	    IAssembler<TDto, TEntity> assembler;
	    IRepository<TEntity> repository;
	
	    public Service(IAssembler<TDto, TEntity> assembler,
	        IRepository<TEntity> repository)
	    {
	        this.assembler = assembler;
	        this.repository = repository;
	    }
	
	    public IAssembler<TDto, TEntity> Assembler 
	    { 
	        get 
	        {
	            return this.assembler; 
	        } 
	    }
	
	    public IRepository<TEntity> Repository 
	    { 
	        get 
	        {
	            return this.repository; 
	        }
	    }
		
		public virtual IEnumerable<TDto> GetAll()
	    {
	        return this.assembler.Assemble(this.Repository.GetAll());
	    }
	
	    public virtual IEnumerable<TDto> Find(Expression<Func<TEntity, bool>> filter)
	    {
	        return this.Assembler.Assemble(this.Repository.Find(filter));
	    }
	
	    public virtual IEnumerable<TDto> Find(int startRowIndex, int maximumRows)
	    {
	        return this.Find(startRowIndex, maximumRows, null, null);
	    }
	
	    public virtual IEnumerable<TDto> Find(string sortExpression, string filterExpression)
	    {
	        return this.Find(null, null, sortExpression, filterExpression);
	    }
	
	    public virtual IEnumerable<TDto> Find(int? startRowIndex, int? maximumRows, string sortExpression, string filterExpression)
	    {
	        IQueryable<TEntity> query = this.Repository.GetAll();
	
	        if (!string.IsNullOrEmpty(filterExpression))
	        {
	            query = query.Where(filterExpression);
	        }
	        if (!string.IsNullOrEmpty(sortExpression))
	        {
	            query = query.OrderBy(sortExpression);
	        }
	        if (startRowIndex.HasValue)
	        {
	            query = query.Skip(startRowIndex.Value);
	        }
	        if (maximumRows.HasValue)
	        {
	            query = query.Take(maximumRows.Value);
	        }
	
	        return this.Assembler.Assemble(query);
	    }
	
	    public virtual int Count()
	    {
	        return this.Count(string.Empty);
	    }
	
	    public virtual int Count(string filterExpression)
	    {
	        IQueryable<TEntity> query = this.Repository.GetAll();
	
	        if (!string.IsNullOrEmpty(filterExpression))
	        {
	            query = query.Where(filterExpression);    
	        }
	
	        return query.Count();
	    }
	
	    
	    public virtual TDto GetByKey(string dtoKey)
	    {
	        ObjectKey key = KeyUtility.Instance.Convert<TEntity>(dtoKey);
			
	        return this.assembler.Assemble(this.Repository.Get(key));
	    }
	
	    public virtual string Add(TDto dto)
	    {
	        TEntity entity = this.assembler.Assemble(null, dto);
	
	        this.repository.Add(entity);
	
	        ObjectKey key = KeyUtility.Instance.Create(entity);
	
	        return KeyUtility.Instance.Convert(key);
	    }
	
	    public virtual void Update(TDto dto)
	    {
	        ObjectKey key = KeyUtility.Instance.Convert<TEntity>(dto.DtoKey);
	        TEntity entity = this.repository.Get(key);
	
	        this.assembler.Assemble(entity, dto);
	    }
	
	    public virtual void Delete(TDto dto)
	    {
			ObjectKey key = KeyUtility.Instance.Convert<TEntity>(dto.DtoKey);
	        TEntity entity = this.repository.Get(key);
	
	        this.Repository.Remove(entity);
	    }
	}
	
	public partial interface IConsultazioneService : IService<ConsultazioneDto, Consultazione>
	{
	
	}
	
	public partial class ConsultazioneService : Service<ConsultazioneDto, Consultazione>, IConsultazioneService
	{
	    public ConsultazioneService(IConsultazioneAssembler assembler, IConsultazioneRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface ICapoCoalizioneService : IService<CapoCoalizioneDto, CapoCoalizione>
	{
	
	}
	
	public partial class CapoCoalizioneService : Service<CapoCoalizioneDto, CapoCoalizione>, ICapoCoalizioneService
	{
	    public CapoCoalizioneService(ICapoCoalizioneAssembler assembler, ICapoCoalizioneRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface IListaService : IService<ListaDto, Lista>
	{
	
	}
	
	public partial class ListaService : Service<ListaDto, Lista>, IListaService
	{
	    public ListaService(IListaAssembler assembler, IListaRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface ICandidatoService : IService<CandidatoDto, Candidato>
	{
	
	}
	
	public partial class CandidatoService : Service<CandidatoDto, Candidato>, ICandidatoService
	{
	    public CandidatoService(ICandidatoAssembler assembler, ICandidatoRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface ISedeElettoraleService : IService<SedeElettoraleDto, SedeElettorale>
	{
	
	}
	
	public partial class SedeElettoraleService : Service<SedeElettoraleDto, SedeElettorale>, ISedeElettoraleService
	{
	    public SedeElettoraleService(ISedeElettoraleAssembler assembler, ISedeElettoraleRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface ISezioneService : IService<SezioneDto, Sezione>
	{
	
	}
	
	public partial class SezioneService : Service<SezioneDto, Sezione>, ISezioneService
	{
	    public SezioneService(ISezioneAssembler assembler, ISezioneRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface IAffluenzaService : IService<AffluenzaDto, Affluenza>
	{
	
	}
	
	public partial class AffluenzaService : Service<AffluenzaDto, Affluenza>, IAffluenzaService
	{
	    public AffluenzaService(IAffluenzaAssembler assembler, IAffluenzaRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface IComuneService : IService<ComuneDto, Comune>
	{
	
	}
	
	public partial class ComuneService : Service<ComuneDto, Comune>, IComuneService
	{
	    public ComuneService(IComuneAssembler assembler, IComuneRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface ICollegioService : IService<CollegioDto, Collegio>
	{
	
	}
	
	public partial class CollegioService : Service<CollegioDto, Collegio>, ICollegioService
	{
	    public CollegioService(ICollegioAssembler assembler, ICollegioRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface ISezioneCollegioService : IService<SezioneCollegioDto, SezioneCollegio>
	{
	
	}
	
	public partial class SezioneCollegioService : Service<SezioneCollegioDto, SezioneCollegio>, ISezioneCollegioService
	{
	    public SezioneCollegioService(ISezioneCollegioAssembler assembler, ISezioneCollegioRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface IRilevamentoService : IService<RilevamentoDto, Rilevamento>
	{
	
	}
	
	public partial class RilevamentoService : Service<RilevamentoDto, Rilevamento>, IRilevamentoService
	{
	    public RilevamentoService(IRilevamentoAssembler assembler, IRilevamentoRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface IScrutinioCapoCoalizioneService : IService<ScrutinioCapoCoalizioneDto, ScrutinioCapoCoalizione>
	{
	
	}
	
	public partial class ScrutinioCapoCoalizioneService : Service<ScrutinioCapoCoalizioneDto, ScrutinioCapoCoalizione>, IScrutinioCapoCoalizioneService
	{
	    public ScrutinioCapoCoalizioneService(IScrutinioCapoCoalizioneAssembler assembler, IScrutinioCapoCoalizioneRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface IScrutinioService : IService<ScrutinioDto, Scrutinio>
	{
	
	}
	
	public partial class ScrutinioService : Service<ScrutinioDto, Scrutinio>, IScrutinioService
	{
	    public ScrutinioService(IScrutinioAssembler assembler, IScrutinioRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface IScrutinioListaService : IService<ScrutinioListaDto, ScrutinioLista>
	{
	
	}
	
	public partial class ScrutinioListaService : Service<ScrutinioListaDto, ScrutinioLista>, IScrutinioListaService
	{
	    public ScrutinioListaService(IScrutinioListaAssembler assembler, IScrutinioListaRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface IScrutinioCandidatoService : IService<ScrutinioCandidatoDto, ScrutinioCandidato>
	{
	
	}
	
	public partial class ScrutinioCandidatoService : Service<ScrutinioCandidatoDto, ScrutinioCandidato>, IScrutinioCandidatoService
	{
	    public ScrutinioCandidatoService(IScrutinioCandidatoAssembler assembler, IScrutinioCandidatoRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
	
	public partial interface IOperatoreService : IService<OperatoreDto, Operatore>
	{
	
	}
	
	public partial class OperatoreService : Service<OperatoreDto, Operatore>, IOperatoreService
	{
	    public OperatoreService(IOperatoreAssembler assembler, IOperatoreRepository repository)
	        : base(assembler, repository)
	    {
	
	    }
	}
}
#pragma warning restore 1591
