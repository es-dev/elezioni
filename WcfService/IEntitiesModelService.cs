#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Code is generated byTelerik Data Access Service Wizard
// using PlainIDataService.tt template

namespace WcfService
{
	using System.ServiceModel;
	using WcfService.Dto;
	using System;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.Serialization;

	/// <summary>
	/// EntitiesModelService interface.
	/// </summary>
	[ServiceContract]
	public interface IEntitiesModelService
	{
	    #region Affluenzas CRUD Operations
	
	    /// <summary>
	    /// Returns all affluenzas.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AffluenzaDto> ReadAffluenzas();
	
	    /// <summary>
	    /// Returns a specified amount of affluenzas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AffluenzaDto> ReadAffluenzasPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all affluenzas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AffluenzaDto> ReadAffluenzasFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of affluenzas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AffluenzaDto> ReadAffluenzasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a affluenza with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    AffluenzaDto ReadAffluenza(string dtoKey);
	
	    /// <summary>
	    /// Returns all affluenzas count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int AffluenzasCount();
	
	    /// <summary>
	    /// Returns all affluenzas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int AffluenzasCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new affluenza from the given dto object into the database.
	    /// </summary>
	    /// <param name="affluenza">The dto object.</param>
	    /// <returns>The dto key of the newly created affluenza.</returns>
	    [OperationContract]
	    string CreateAffluenza(AffluenzaDto affluenza);
	
	    /// <summary>
	    /// Updates affluenza in the database from the given dto object.
	    /// </summary>
	    /// <param name="affluenza">The dto object.</param>
	    [OperationContract]
	    void UpdateAffluenza(AffluenzaDto affluenza);
	
	    /// <summary>
	    /// Update an existing affluenzas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="affluenzas">The dto object list.</param>
	    [OperationContract]
	    void UpdateAffluenzas(IEnumerable<AffluenzaDto> affluenzas);
	
	    /// <summary>
	    /// Deletes affluenza from the database by the given dto object.
	    /// </summary>
	    /// <param name="affluenza">The dto object.</param>
	    [OperationContract]
	    void DeleteAffluenza(AffluenzaDto affluenza);
	
	    /// <summary>
	    /// Delete affluenzas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="affluenzas">The dto object list.</param>
	    [OperationContract]
	    void DeleteAffluenzas(IEnumerable<AffluenzaDto> affluenzas);
	    
	    #endregion
	    
	    #region Candidatos CRUD Operations
	
	    /// <summary>
	    /// Returns all candidatos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CandidatoDto> ReadCandidatos();
	
	    /// <summary>
	    /// Returns a specified amount of candidatos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CandidatoDto> ReadCandidatosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all candidatos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CandidatoDto> ReadCandidatosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of candidatos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CandidatoDto> ReadCandidatosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a candidato with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CandidatoDto ReadCandidato(string dtoKey);
	
	    /// <summary>
	    /// Returns all candidatos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CandidatosCount();
	
	    /// <summary>
	    /// Returns all candidatos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CandidatosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new candidato from the given dto object into the database.
	    /// </summary>
	    /// <param name="candidato">The dto object.</param>
	    /// <returns>The dto key of the newly created candidato.</returns>
	    [OperationContract]
	    string CreateCandidato(CandidatoDto candidato);
	
	    /// <summary>
	    /// Updates candidato in the database from the given dto object.
	    /// </summary>
	    /// <param name="candidato">The dto object.</param>
	    [OperationContract]
	    void UpdateCandidato(CandidatoDto candidato);
	
	    /// <summary>
	    /// Update an existing candidatos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="candidatos">The dto object list.</param>
	    [OperationContract]
	    void UpdateCandidatos(IEnumerable<CandidatoDto> candidatos);
	
	    /// <summary>
	    /// Deletes candidato from the database by the given dto object.
	    /// </summary>
	    /// <param name="candidato">The dto object.</param>
	    [OperationContract]
	    void DeleteCandidato(CandidatoDto candidato);
	
	    /// <summary>
	    /// Delete candidatos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="candidatos">The dto object list.</param>
	    [OperationContract]
	    void DeleteCandidatos(IEnumerable<CandidatoDto> candidatos);
	    
	    #endregion
	    
	    #region CapoCoaliziones CRUD Operations
	
	    /// <summary>
	    /// Returns all capocoaliziones.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CapoCoalizioneDto> ReadCapoCoaliziones();
	
	    /// <summary>
	    /// Returns a specified amount of capocoaliziones from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CapoCoalizioneDto> ReadCapoCoalizionesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all capocoaliziones filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CapoCoalizioneDto> ReadCapoCoalizionesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of capocoaliziones from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CapoCoalizioneDto> ReadCapoCoalizionesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a capocoalizione with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CapoCoalizioneDto ReadCapoCoalizione(string dtoKey);
	
	    /// <summary>
	    /// Returns all capocoaliziones count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CapoCoalizionesCount();
	
	    /// <summary>
	    /// Returns all capocoaliziones count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CapoCoalizionesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new capocoalizione from the given dto object into the database.
	    /// </summary>
	    /// <param name="capocoalizione">The dto object.</param>
	    /// <returns>The dto key of the newly created capocoalizione.</returns>
	    [OperationContract]
	    string CreateCapoCoalizione(CapoCoalizioneDto capocoalizione);
	
	    /// <summary>
	    /// Updates capocoalizione in the database from the given dto object.
	    /// </summary>
	    /// <param name="capocoalizione">The dto object.</param>
	    [OperationContract]
	    void UpdateCapoCoalizione(CapoCoalizioneDto capocoalizione);
	
	    /// <summary>
	    /// Update an existing capocoaliziones in the database from the given dto object list.
	    /// </summary>
	    /// <param name="capocoaliziones">The dto object list.</param>
	    [OperationContract]
	    void UpdateCapoCoaliziones(IEnumerable<CapoCoalizioneDto> capocoaliziones);
	
	    /// <summary>
	    /// Deletes capocoalizione from the database by the given dto object.
	    /// </summary>
	    /// <param name="capocoalizione">The dto object.</param>
	    [OperationContract]
	    void DeleteCapoCoalizione(CapoCoalizioneDto capocoalizione);
	
	    /// <summary>
	    /// Delete capocoaliziones from the database by the given dto object list.
	    /// </summary>
	    /// <param name="capocoaliziones">The dto object list.</param>
	    [OperationContract]
	    void DeleteCapoCoaliziones(IEnumerable<CapoCoalizioneDto> capocoaliziones);
	    
	    #endregion
	    
	    #region Collegios CRUD Operations
	
	    /// <summary>
	    /// Returns all collegios.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CollegioDto> ReadCollegios();
	
	    /// <summary>
	    /// Returns a specified amount of collegios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CollegioDto> ReadCollegiosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all collegios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CollegioDto> ReadCollegiosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of collegios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CollegioDto> ReadCollegiosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a collegio with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CollegioDto ReadCollegio(string dtoKey);
	
	    /// <summary>
	    /// Returns all collegios count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CollegiosCount();
	
	    /// <summary>
	    /// Returns all collegios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CollegiosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new collegio from the given dto object into the database.
	    /// </summary>
	    /// <param name="collegio">The dto object.</param>
	    /// <returns>The dto key of the newly created collegio.</returns>
	    [OperationContract]
	    string CreateCollegio(CollegioDto collegio);
	
	    /// <summary>
	    /// Updates collegio in the database from the given dto object.
	    /// </summary>
	    /// <param name="collegio">The dto object.</param>
	    [OperationContract]
	    void UpdateCollegio(CollegioDto collegio);
	
	    /// <summary>
	    /// Update an existing collegios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="collegios">The dto object list.</param>
	    [OperationContract]
	    void UpdateCollegios(IEnumerable<CollegioDto> collegios);
	
	    /// <summary>
	    /// Deletes collegio from the database by the given dto object.
	    /// </summary>
	    /// <param name="collegio">The dto object.</param>
	    [OperationContract]
	    void DeleteCollegio(CollegioDto collegio);
	
	    /// <summary>
	    /// Delete collegios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="collegios">The dto object list.</param>
	    [OperationContract]
	    void DeleteCollegios(IEnumerable<CollegioDto> collegios);
	    
	    #endregion
	    
	    #region Comunes CRUD Operations
	
	    /// <summary>
	    /// Returns all comunes.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ComuneDto> ReadComunes();
	
	    /// <summary>
	    /// Returns a specified amount of comunes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ComuneDto> ReadComunesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all comunes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ComuneDto> ReadComunesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of comunes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ComuneDto> ReadComunesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a comune with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ComuneDto ReadComune(string dtoKey);
	
	    /// <summary>
	    /// Returns all comunes count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ComunesCount();
	
	    /// <summary>
	    /// Returns all comunes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ComunesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new comune from the given dto object into the database.
	    /// </summary>
	    /// <param name="comune">The dto object.</param>
	    /// <returns>The dto key of the newly created comune.</returns>
	    [OperationContract]
	    string CreateComune(ComuneDto comune);
	
	    /// <summary>
	    /// Updates comune in the database from the given dto object.
	    /// </summary>
	    /// <param name="comune">The dto object.</param>
	    [OperationContract]
	    void UpdateComune(ComuneDto comune);
	
	    /// <summary>
	    /// Update an existing comunes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="comunes">The dto object list.</param>
	    [OperationContract]
	    void UpdateComunes(IEnumerable<ComuneDto> comunes);
	
	    /// <summary>
	    /// Deletes comune from the database by the given dto object.
	    /// </summary>
	    /// <param name="comune">The dto object.</param>
	    [OperationContract]
	    void DeleteComune(ComuneDto comune);
	
	    /// <summary>
	    /// Delete comunes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="comunes">The dto object list.</param>
	    [OperationContract]
	    void DeleteComunes(IEnumerable<ComuneDto> comunes);
	    
	    #endregion
	    
	    #region Consultaziones CRUD Operations
	
	    /// <summary>
	    /// Returns all consultaziones.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConsultazioneDto> ReadConsultaziones();
	
	    /// <summary>
	    /// Returns a specified amount of consultaziones from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConsultazioneDto> ReadConsultazionesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all consultaziones filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConsultazioneDto> ReadConsultazionesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of consultaziones from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConsultazioneDto> ReadConsultazionesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a consultazione with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ConsultazioneDto ReadConsultazione(string dtoKey);
	
	    /// <summary>
	    /// Returns all consultaziones count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ConsultazionesCount();
	
	    /// <summary>
	    /// Returns all consultaziones count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ConsultazionesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new consultazione from the given dto object into the database.
	    /// </summary>
	    /// <param name="consultazione">The dto object.</param>
	    /// <returns>The dto key of the newly created consultazione.</returns>
	    [OperationContract]
	    string CreateConsultazione(ConsultazioneDto consultazione);
	
	    /// <summary>
	    /// Updates consultazione in the database from the given dto object.
	    /// </summary>
	    /// <param name="consultazione">The dto object.</param>
	    [OperationContract]
	    void UpdateConsultazione(ConsultazioneDto consultazione);
	
	    /// <summary>
	    /// Update an existing consultaziones in the database from the given dto object list.
	    /// </summary>
	    /// <param name="consultaziones">The dto object list.</param>
	    [OperationContract]
	    void UpdateConsultaziones(IEnumerable<ConsultazioneDto> consultaziones);
	
	    /// <summary>
	    /// Deletes consultazione from the database by the given dto object.
	    /// </summary>
	    /// <param name="consultazione">The dto object.</param>
	    [OperationContract]
	    void DeleteConsultazione(ConsultazioneDto consultazione);
	
	    /// <summary>
	    /// Delete consultaziones from the database by the given dto object list.
	    /// </summary>
	    /// <param name="consultaziones">The dto object list.</param>
	    [OperationContract]
	    void DeleteConsultaziones(IEnumerable<ConsultazioneDto> consultaziones);
	    
	    #endregion
	    
	    #region Listas CRUD Operations
	
	    /// <summary>
	    /// Returns all listas.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ListaDto> ReadListas();
	
	    /// <summary>
	    /// Returns a specified amount of listas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ListaDto> ReadListasPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all listas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ListaDto> ReadListasFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of listas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ListaDto> ReadListasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a lista with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ListaDto ReadLista(string dtoKey);
	
	    /// <summary>
	    /// Returns all listas count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ListasCount();
	
	    /// <summary>
	    /// Returns all listas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ListasCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new lista from the given dto object into the database.
	    /// </summary>
	    /// <param name="lista">The dto object.</param>
	    /// <returns>The dto key of the newly created lista.</returns>
	    [OperationContract]
	    string CreateLista(ListaDto lista);
	
	    /// <summary>
	    /// Updates lista in the database from the given dto object.
	    /// </summary>
	    /// <param name="lista">The dto object.</param>
	    [OperationContract]
	    void UpdateLista(ListaDto lista);
	
	    /// <summary>
	    /// Update an existing listas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="listas">The dto object list.</param>
	    [OperationContract]
	    void UpdateListas(IEnumerable<ListaDto> listas);
	
	    /// <summary>
	    /// Deletes lista from the database by the given dto object.
	    /// </summary>
	    /// <param name="lista">The dto object.</param>
	    [OperationContract]
	    void DeleteLista(ListaDto lista);
	
	    /// <summary>
	    /// Delete listas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="listas">The dto object list.</param>
	    [OperationContract]
	    void DeleteListas(IEnumerable<ListaDto> listas);
	    
	    #endregion
	    
	    #region Operatores CRUD Operations
	
	    /// <summary>
	    /// Returns all operatores.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<OperatoreDto> ReadOperatores();
	
	    /// <summary>
	    /// Returns a specified amount of operatores from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<OperatoreDto> ReadOperatoresPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all operatores filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<OperatoreDto> ReadOperatoresFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of operatores from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<OperatoreDto> ReadOperatoresPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a operatore with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    OperatoreDto ReadOperatore(string dtoKey);
	
	    /// <summary>
	    /// Returns all operatores count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int OperatoresCount();
	
	    /// <summary>
	    /// Returns all operatores count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int OperatoresCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new operatore from the given dto object into the database.
	    /// </summary>
	    /// <param name="operatore">The dto object.</param>
	    /// <returns>The dto key of the newly created operatore.</returns>
	    [OperationContract]
	    string CreateOperatore(OperatoreDto operatore);
	
	    /// <summary>
	    /// Updates operatore in the database from the given dto object.
	    /// </summary>
	    /// <param name="operatore">The dto object.</param>
	    [OperationContract]
	    void UpdateOperatore(OperatoreDto operatore);
	
	    /// <summary>
	    /// Update an existing operatores in the database from the given dto object list.
	    /// </summary>
	    /// <param name="operatores">The dto object list.</param>
	    [OperationContract]
	    void UpdateOperatores(IEnumerable<OperatoreDto> operatores);
	
	    /// <summary>
	    /// Deletes operatore from the database by the given dto object.
	    /// </summary>
	    /// <param name="operatore">The dto object.</param>
	    [OperationContract]
	    void DeleteOperatore(OperatoreDto operatore);
	
	    /// <summary>
	    /// Delete operatores from the database by the given dto object list.
	    /// </summary>
	    /// <param name="operatores">The dto object list.</param>
	    [OperationContract]
	    void DeleteOperatores(IEnumerable<OperatoreDto> operatores);
	    
	    #endregion
	    
	    #region Rilevamentos CRUD Operations
	
	    /// <summary>
	    /// Returns all rilevamentos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RilevamentoDto> ReadRilevamentos();
	
	    /// <summary>
	    /// Returns a specified amount of rilevamentos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RilevamentoDto> ReadRilevamentosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all rilevamentos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RilevamentoDto> ReadRilevamentosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of rilevamentos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RilevamentoDto> ReadRilevamentosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a rilevamento with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    RilevamentoDto ReadRilevamento(string dtoKey);
	
	    /// <summary>
	    /// Returns all rilevamentos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int RilevamentosCount();
	
	    /// <summary>
	    /// Returns all rilevamentos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int RilevamentosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new rilevamento from the given dto object into the database.
	    /// </summary>
	    /// <param name="rilevamento">The dto object.</param>
	    /// <returns>The dto key of the newly created rilevamento.</returns>
	    [OperationContract]
	    string CreateRilevamento(RilevamentoDto rilevamento);
	
	    /// <summary>
	    /// Updates rilevamento in the database from the given dto object.
	    /// </summary>
	    /// <param name="rilevamento">The dto object.</param>
	    [OperationContract]
	    void UpdateRilevamento(RilevamentoDto rilevamento);
	
	    /// <summary>
	    /// Update an existing rilevamentos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="rilevamentos">The dto object list.</param>
	    [OperationContract]
	    void UpdateRilevamentos(IEnumerable<RilevamentoDto> rilevamentos);
	
	    /// <summary>
	    /// Deletes rilevamento from the database by the given dto object.
	    /// </summary>
	    /// <param name="rilevamento">The dto object.</param>
	    [OperationContract]
	    void DeleteRilevamento(RilevamentoDto rilevamento);
	
	    /// <summary>
	    /// Delete rilevamentos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="rilevamentos">The dto object list.</param>
	    [OperationContract]
	    void DeleteRilevamentos(IEnumerable<RilevamentoDto> rilevamentos);
	    
	    #endregion
	    
	    #region Scrutinios CRUD Operations
	
	    /// <summary>
	    /// Returns all scrutinios.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ScrutinioDto> ReadScrutinios();
	
	    /// <summary>
	    /// Returns a specified amount of scrutinios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ScrutinioDto> ReadScrutiniosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all scrutinios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ScrutinioDto> ReadScrutiniosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of scrutinios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ScrutinioDto> ReadScrutiniosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a scrutinio with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ScrutinioDto ReadScrutinio(string dtoKey);
	
	    /// <summary>
	    /// Returns all scrutinios count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ScrutiniosCount();
	
	    /// <summary>
	    /// Returns all scrutinios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ScrutiniosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new scrutinio from the given dto object into the database.
	    /// </summary>
	    /// <param name="scrutinio">The dto object.</param>
	    /// <returns>The dto key of the newly created scrutinio.</returns>
	    [OperationContract]
	    string CreateScrutinio(ScrutinioDto scrutinio);
	
	    /// <summary>
	    /// Updates scrutinio in the database from the given dto object.
	    /// </summary>
	    /// <param name="scrutinio">The dto object.</param>
	    [OperationContract]
	    void UpdateScrutinio(ScrutinioDto scrutinio);
	
	    /// <summary>
	    /// Update an existing scrutinios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="scrutinios">The dto object list.</param>
	    [OperationContract]
	    void UpdateScrutinios(IEnumerable<ScrutinioDto> scrutinios);
	
	    /// <summary>
	    /// Deletes scrutinio from the database by the given dto object.
	    /// </summary>
	    /// <param name="scrutinio">The dto object.</param>
	    [OperationContract]
	    void DeleteScrutinio(ScrutinioDto scrutinio);
	
	    /// <summary>
	    /// Delete scrutinios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="scrutinios">The dto object list.</param>
	    [OperationContract]
	    void DeleteScrutinios(IEnumerable<ScrutinioDto> scrutinios);
	    
	    #endregion
	    
	    #region ScrutinioCandidatos CRUD Operations
	
	    /// <summary>
	    /// Returns all scrutiniocandidatos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ScrutinioCandidatoDto> ReadScrutinioCandidatos();
	
	    /// <summary>
	    /// Returns a specified amount of scrutiniocandidatos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ScrutinioCandidatoDto> ReadScrutinioCandidatosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all scrutiniocandidatos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ScrutinioCandidatoDto> ReadScrutinioCandidatosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of scrutiniocandidatos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ScrutinioCandidatoDto> ReadScrutinioCandidatosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a scrutiniocandidato with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ScrutinioCandidatoDto ReadScrutinioCandidato(string dtoKey);
	
	    /// <summary>
	    /// Returns all scrutiniocandidatos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ScrutinioCandidatosCount();
	
	    /// <summary>
	    /// Returns all scrutiniocandidatos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ScrutinioCandidatosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new scrutiniocandidato from the given dto object into the database.
	    /// </summary>
	    /// <param name="scrutiniocandidato">The dto object.</param>
	    /// <returns>The dto key of the newly created scrutiniocandidato.</returns>
	    [OperationContract]
	    string CreateScrutinioCandidato(ScrutinioCandidatoDto scrutiniocandidato);
	
	    /// <summary>
	    /// Updates scrutiniocandidato in the database from the given dto object.
	    /// </summary>
	    /// <param name="scrutiniocandidato">The dto object.</param>
	    [OperationContract]
	    void UpdateScrutinioCandidato(ScrutinioCandidatoDto scrutiniocandidato);
	
	    /// <summary>
	    /// Update an existing scrutiniocandidatos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="scrutiniocandidatos">The dto object list.</param>
	    [OperationContract]
	    void UpdateScrutinioCandidatos(IEnumerable<ScrutinioCandidatoDto> scrutiniocandidatos);
	
	    /// <summary>
	    /// Deletes scrutiniocandidato from the database by the given dto object.
	    /// </summary>
	    /// <param name="scrutiniocandidato">The dto object.</param>
	    [OperationContract]
	    void DeleteScrutinioCandidato(ScrutinioCandidatoDto scrutiniocandidato);
	
	    /// <summary>
	    /// Delete scrutiniocandidatos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="scrutiniocandidatos">The dto object list.</param>
	    [OperationContract]
	    void DeleteScrutinioCandidatos(IEnumerable<ScrutinioCandidatoDto> scrutiniocandidatos);
	    
	    #endregion
	    
	    #region ScrutinioCapoCoaliziones CRUD Operations
	
	    /// <summary>
	    /// Returns all scrutiniocapocoaliziones.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ScrutinioCapoCoalizioneDto> ReadScrutinioCapoCoaliziones();
	
	    /// <summary>
	    /// Returns a specified amount of scrutiniocapocoaliziones from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ScrutinioCapoCoalizioneDto> ReadScrutinioCapoCoalizionesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all scrutiniocapocoaliziones filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ScrutinioCapoCoalizioneDto> ReadScrutinioCapoCoalizionesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of scrutiniocapocoaliziones from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ScrutinioCapoCoalizioneDto> ReadScrutinioCapoCoalizionesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a scrutiniocapocoalizione with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ScrutinioCapoCoalizioneDto ReadScrutinioCapoCoalizione(string dtoKey);
	
	    /// <summary>
	    /// Returns all scrutiniocapocoaliziones count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ScrutinioCapoCoalizionesCount();
	
	    /// <summary>
	    /// Returns all scrutiniocapocoaliziones count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ScrutinioCapoCoalizionesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new scrutiniocapocoalizione from the given dto object into the database.
	    /// </summary>
	    /// <param name="scrutiniocapocoalizione">The dto object.</param>
	    /// <returns>The dto key of the newly created scrutiniocapocoalizione.</returns>
	    [OperationContract]
	    string CreateScrutinioCapoCoalizione(ScrutinioCapoCoalizioneDto scrutiniocapocoalizione);
	
	    /// <summary>
	    /// Updates scrutiniocapocoalizione in the database from the given dto object.
	    /// </summary>
	    /// <param name="scrutiniocapocoalizione">The dto object.</param>
	    [OperationContract]
	    void UpdateScrutinioCapoCoalizione(ScrutinioCapoCoalizioneDto scrutiniocapocoalizione);
	
	    /// <summary>
	    /// Update an existing scrutiniocapocoaliziones in the database from the given dto object list.
	    /// </summary>
	    /// <param name="scrutiniocapocoaliziones">The dto object list.</param>
	    [OperationContract]
	    void UpdateScrutinioCapoCoaliziones(IEnumerable<ScrutinioCapoCoalizioneDto> scrutiniocapocoaliziones);
	
	    /// <summary>
	    /// Deletes scrutiniocapocoalizione from the database by the given dto object.
	    /// </summary>
	    /// <param name="scrutiniocapocoalizione">The dto object.</param>
	    [OperationContract]
	    void DeleteScrutinioCapoCoalizione(ScrutinioCapoCoalizioneDto scrutiniocapocoalizione);
	
	    /// <summary>
	    /// Delete scrutiniocapocoaliziones from the database by the given dto object list.
	    /// </summary>
	    /// <param name="scrutiniocapocoaliziones">The dto object list.</param>
	    [OperationContract]
	    void DeleteScrutinioCapoCoaliziones(IEnumerable<ScrutinioCapoCoalizioneDto> scrutiniocapocoaliziones);
	    
	    #endregion
	    
	    #region ScrutinioListas CRUD Operations
	
	    /// <summary>
	    /// Returns all scrutiniolistas.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ScrutinioListaDto> ReadScrutinioListas();
	
	    /// <summary>
	    /// Returns a specified amount of scrutiniolistas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ScrutinioListaDto> ReadScrutinioListasPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all scrutiniolistas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ScrutinioListaDto> ReadScrutinioListasFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of scrutiniolistas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ScrutinioListaDto> ReadScrutinioListasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a scrutiniolista with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ScrutinioListaDto ReadScrutinioLista(string dtoKey);
	
	    /// <summary>
	    /// Returns all scrutiniolistas count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ScrutinioListasCount();
	
	    /// <summary>
	    /// Returns all scrutiniolistas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ScrutinioListasCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new scrutiniolista from the given dto object into the database.
	    /// </summary>
	    /// <param name="scrutiniolista">The dto object.</param>
	    /// <returns>The dto key of the newly created scrutiniolista.</returns>
	    [OperationContract]
	    string CreateScrutinioLista(ScrutinioListaDto scrutiniolista);
	
	    /// <summary>
	    /// Updates scrutiniolista in the database from the given dto object.
	    /// </summary>
	    /// <param name="scrutiniolista">The dto object.</param>
	    [OperationContract]
	    void UpdateScrutinioLista(ScrutinioListaDto scrutiniolista);
	
	    /// <summary>
	    /// Update an existing scrutiniolistas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="scrutiniolistas">The dto object list.</param>
	    [OperationContract]
	    void UpdateScrutinioListas(IEnumerable<ScrutinioListaDto> scrutiniolistas);
	
	    /// <summary>
	    /// Deletes scrutiniolista from the database by the given dto object.
	    /// </summary>
	    /// <param name="scrutiniolista">The dto object.</param>
	    [OperationContract]
	    void DeleteScrutinioLista(ScrutinioListaDto scrutiniolista);
	
	    /// <summary>
	    /// Delete scrutiniolistas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="scrutiniolistas">The dto object list.</param>
	    [OperationContract]
	    void DeleteScrutinioListas(IEnumerable<ScrutinioListaDto> scrutiniolistas);
	    
	    #endregion
	    
	    #region SedeElettorales CRUD Operations
	
	    /// <summary>
	    /// Returns all sedeelettorales.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SedeElettoraleDto> ReadSedeElettorales();
	
	    /// <summary>
	    /// Returns a specified amount of sedeelettorales from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SedeElettoraleDto> ReadSedeElettoralesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all sedeelettorales filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SedeElettoraleDto> ReadSedeElettoralesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of sedeelettorales from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SedeElettoraleDto> ReadSedeElettoralesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a sedeelettorale with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    SedeElettoraleDto ReadSedeElettorale(string dtoKey);
	
	    /// <summary>
	    /// Returns all sedeelettorales count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int SedeElettoralesCount();
	
	    /// <summary>
	    /// Returns all sedeelettorales count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int SedeElettoralesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new sedeelettorale from the given dto object into the database.
	    /// </summary>
	    /// <param name="sedeelettorale">The dto object.</param>
	    /// <returns>The dto key of the newly created sedeelettorale.</returns>
	    [OperationContract]
	    string CreateSedeElettorale(SedeElettoraleDto sedeelettorale);
	
	    /// <summary>
	    /// Updates sedeelettorale in the database from the given dto object.
	    /// </summary>
	    /// <param name="sedeelettorale">The dto object.</param>
	    [OperationContract]
	    void UpdateSedeElettorale(SedeElettoraleDto sedeelettorale);
	
	    /// <summary>
	    /// Update an existing sedeelettorales in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sedeelettorales">The dto object list.</param>
	    [OperationContract]
	    void UpdateSedeElettorales(IEnumerable<SedeElettoraleDto> sedeelettorales);
	
	    /// <summary>
	    /// Deletes sedeelettorale from the database by the given dto object.
	    /// </summary>
	    /// <param name="sedeelettorale">The dto object.</param>
	    [OperationContract]
	    void DeleteSedeElettorale(SedeElettoraleDto sedeelettorale);
	
	    /// <summary>
	    /// Delete sedeelettorales from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sedeelettorales">The dto object list.</param>
	    [OperationContract]
	    void DeleteSedeElettorales(IEnumerable<SedeElettoraleDto> sedeelettorales);
	    
	    #endregion
	    
	    #region Seziones CRUD Operations
	
	    /// <summary>
	    /// Returns all seziones.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SezioneDto> ReadSeziones();
	
	    /// <summary>
	    /// Returns a specified amount of seziones from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SezioneDto> ReadSezionesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all seziones filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SezioneDto> ReadSezionesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of seziones from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SezioneDto> ReadSezionesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a sezione with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    SezioneDto ReadSezione(string dtoKey);
	
	    /// <summary>
	    /// Returns all seziones count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int SezionesCount();
	
	    /// <summary>
	    /// Returns all seziones count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int SezionesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new sezione from the given dto object into the database.
	    /// </summary>
	    /// <param name="sezione">The dto object.</param>
	    /// <returns>The dto key of the newly created sezione.</returns>
	    [OperationContract]
	    string CreateSezione(SezioneDto sezione);
	
	    /// <summary>
	    /// Updates sezione in the database from the given dto object.
	    /// </summary>
	    /// <param name="sezione">The dto object.</param>
	    [OperationContract]
	    void UpdateSezione(SezioneDto sezione);
	
	    /// <summary>
	    /// Update an existing seziones in the database from the given dto object list.
	    /// </summary>
	    /// <param name="seziones">The dto object list.</param>
	    [OperationContract]
	    void UpdateSeziones(IEnumerable<SezioneDto> seziones);
	
	    /// <summary>
	    /// Deletes sezione from the database by the given dto object.
	    /// </summary>
	    /// <param name="sezione">The dto object.</param>
	    [OperationContract]
	    void DeleteSezione(SezioneDto sezione);
	
	    /// <summary>
	    /// Delete seziones from the database by the given dto object list.
	    /// </summary>
	    /// <param name="seziones">The dto object list.</param>
	    [OperationContract]
	    void DeleteSeziones(IEnumerable<SezioneDto> seziones);
	    
	    #endregion
	    
	    #region SezioneCollegios CRUD Operations
	
	    /// <summary>
	    /// Returns all sezionecollegios.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SezioneCollegioDto> ReadSezioneCollegios();
	
	    /// <summary>
	    /// Returns a specified amount of sezionecollegios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SezioneCollegioDto> ReadSezioneCollegiosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all sezionecollegios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SezioneCollegioDto> ReadSezioneCollegiosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of sezionecollegios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SezioneCollegioDto> ReadSezioneCollegiosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a sezionecollegio with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    SezioneCollegioDto ReadSezioneCollegio(string dtoKey);
	
	    /// <summary>
	    /// Returns all sezionecollegios count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int SezioneCollegiosCount();
	
	    /// <summary>
	    /// Returns all sezionecollegios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int SezioneCollegiosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new sezionecollegio from the given dto object into the database.
	    /// </summary>
	    /// <param name="sezionecollegio">The dto object.</param>
	    /// <returns>The dto key of the newly created sezionecollegio.</returns>
	    [OperationContract]
	    string CreateSezioneCollegio(SezioneCollegioDto sezionecollegio);
	
	    /// <summary>
	    /// Updates sezionecollegio in the database from the given dto object.
	    /// </summary>
	    /// <param name="sezionecollegio">The dto object.</param>
	    [OperationContract]
	    void UpdateSezioneCollegio(SezioneCollegioDto sezionecollegio);
	
	    /// <summary>
	    /// Update an existing sezionecollegios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sezionecollegios">The dto object list.</param>
	    [OperationContract]
	    void UpdateSezioneCollegios(IEnumerable<SezioneCollegioDto> sezionecollegios);
	
	    /// <summary>
	    /// Deletes sezionecollegio from the database by the given dto object.
	    /// </summary>
	    /// <param name="sezionecollegio">The dto object.</param>
	    [OperationContract]
	    void DeleteSezioneCollegio(SezioneCollegioDto sezionecollegio);
	
	    /// <summary>
	    /// Delete sezionecollegios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sezionecollegios">The dto object list.</param>
	    [OperationContract]
	    void DeleteSezioneCollegios(IEnumerable<SezioneCollegioDto> sezionecollegios);
	    
	    #endregion
	    
	}
}
#pragma warning restore 1591
